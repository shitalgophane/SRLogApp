//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SRLog.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SR_Log_DatabaseSQLEntities1 : DbContext
    {
        public SR_Log_DatabaseSQLEntities1()
            : base("name=SR_Log_DatabaseSQLEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public DbSet<EMail_Info> EMail_Infoes { get; set; }
        public DbSet<tblActivityLog> tblActivityLogs { get; set; }
        public DbSet<tblAttachmentsForBidLog> tblAttachmentsForBidLogs { get; set; }
        public DbSet<tblBID_Log> tblBID_Logs { get; set; }
        public DbSet<tblCustAddress> tblCustAddresses { get; set; }
        public DbSet<tblCustContact> tblCustContacts { get; set; }
        public DbSet<tblCustomer> tblCustomers { get; set; }
        public DbSet<tblGroupUser> tblGroupUsers { get; set; }
        public DbSet<tblUser> tblUsers { get; set; }
        public DbSet<tblObsolete_BID_Log> tblObsolete_BID_Logs { get; set; }
        public DbSet<tblSR_Log_Test> tblSR_Log_Tests { get; set; }
        public DbSet<tblst_temp> tblst_temps { get; set; }
        public DbSet<tblSetting> tblSettings { get; set; }
        public DbSet<tblSR_Log> tblSR_Logs { get; set; }
        public DbSet<tblObsolete_Quote> tblObsolete_Quotes { get; set; }
        public DbSet<tblQuoteLog> tblQuoteLogs { get; set; }
    
        public virtual ObjectResult<USP_TT_GetBidLogModifiedToday_Result> USP_TT_GetBidLogModifiedToday(Nullable<System.DateTime> modifiedDate)
        {
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TT_GetBidLogModifiedToday_Result>("USP_TT_GetBidLogModifiedToday", modifiedDateParameter);
        }
    
        public virtual ObjectResult<USP_TT_GetBidLogResultsModifiedToday_Result> USP_TT_GetBidLogResultsModifiedToday(Nullable<System.DateTime> modifiedDate)
        {
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TT_GetBidLogResultsModifiedToday_Result>("USP_TT_GetBidLogResultsModifiedToday", modifiedDateParameter);
        }
    
        public virtual ObjectResult<USP_TT_GetNextPrevLastFirst_Result> USP_TT_GetNextPrevLastFirst(Nullable<decimal> sRNumber, string flgNPLF)
        {
            var sRNumberParameter = sRNumber.HasValue ?
                new ObjectParameter("SRNumber", sRNumber) :
                new ObjectParameter("SRNumber", typeof(decimal));
    
            var flgNPLFParameter = flgNPLF != null ?
                new ObjectParameter("FlgNPLF", flgNPLF) :
                new ObjectParameter("FlgNPLF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TT_GetNextPrevLastFirst_Result>("USP_TT_GetNextPrevLastFirst", sRNumberParameter, flgNPLFParameter);
        }
    
        public virtual ObjectResult<USP_TT_GetSRLogCreatedToday_Result> USP_TT_GetSRLogCreatedToday(Nullable<System.DateTime> creationDate)
        {
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TT_GetSRLogCreatedToday_Result>("USP_TT_GetSRLogCreatedToday", creationDateParameter);
        }
    
        public virtual int USP_TT_InsertActivityLog(string userName, Nullable<System.DateTime> activityDate, string formName, string action, string comment)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var activityDateParameter = activityDate.HasValue ?
                new ObjectParameter("ActivityDate", activityDate) :
                new ObjectParameter("ActivityDate", typeof(System.DateTime));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_TT_InsertActivityLog", userNameParameter, activityDateParameter, formNameParameter, actionParameter, commentParameter);
        }
    
        public virtual int USP_TT_InsertCustAddress(Nullable<int> custumerId, string address1, string address2, string city, string state, string zip, string country, string siteName, Nullable<bool> isPrimaryAddress, string projectManager)
        {
            var custumerIdParameter = custumerId.HasValue ?
                new ObjectParameter("CustumerId", custumerId) :
                new ObjectParameter("CustumerId", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var isPrimaryAddressParameter = isPrimaryAddress.HasValue ?
                new ObjectParameter("IsPrimaryAddress", isPrimaryAddress) :
                new ObjectParameter("IsPrimaryAddress", typeof(bool));
    
            var projectManagerParameter = projectManager != null ?
                new ObjectParameter("ProjectManager", projectManager) :
                new ObjectParameter("ProjectManager", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_TT_InsertCustAddress", custumerIdParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, countryParameter, siteNameParameter, isPrimaryAddressParameter, projectManagerParameter);
        }
    
        public virtual int USP_TT_InsertCustContacts(Nullable<int> customerId, string customerContact, string contactPhone, string contactEmail, Nullable<bool> isPrimaryContact)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerContactParameter = customerContact != null ?
                new ObjectParameter("CustomerContact", customerContact) :
                new ObjectParameter("CustomerContact", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var isPrimaryContactParameter = isPrimaryContact.HasValue ?
                new ObjectParameter("IsPrimaryContact", isPrimaryContact) :
                new ObjectParameter("IsPrimaryContact", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_TT_InsertCustContacts", customerIdParameter, customerContactParameter, contactPhoneParameter, contactEmailParameter, isPrimaryContactParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TT_InsertUpdateCustomer(string customerName, string notes, Nullable<bool> isInActive, ObjectParameter result)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var isInActiveParameter = isInActive.HasValue ?
                new ObjectParameter("IsInActive", isInActive) :
                new ObjectParameter("IsInActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TT_InsertUpdateCustomer", customerNameParameter, notesParameter, isInActiveParameter, result);
        }
    
        public virtual ObjectResult<string> USP_TT_InsertUpdateQuote(Nullable<System.DateTime> bidDate, string biddingAs, string bidTo, string projectName, Nullable<short> lastAddendumRecvd, string estimator, Nullable<int> sRNumber, Nullable<int> uID, string notes, string engineersEstimate, string division, Nullable<bool> mandetoryJobWalk, Nullable<System.DateTime> jobWalkDate, Nullable<System.DateTime> qADeadLineDateTime, string quoteStatus, Nullable<System.DateTime> dtpLastDateFollowup, string lastFollowupBy, string followupNote, string emailAddress, string flgAddEdit, string flgFollowUp, ObjectParameter result)
        {
            var bidDateParameter = bidDate.HasValue ?
                new ObjectParameter("BidDate", bidDate) :
                new ObjectParameter("BidDate", typeof(System.DateTime));
    
            var biddingAsParameter = biddingAs != null ?
                new ObjectParameter("BiddingAs", biddingAs) :
                new ObjectParameter("BiddingAs", typeof(string));
    
            var bidToParameter = bidTo != null ?
                new ObjectParameter("BidTo", bidTo) :
                new ObjectParameter("BidTo", typeof(string));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var lastAddendumRecvdParameter = lastAddendumRecvd.HasValue ?
                new ObjectParameter("LastAddendumRecvd", lastAddendumRecvd) :
                new ObjectParameter("LastAddendumRecvd", typeof(short));
    
            var estimatorParameter = estimator != null ?
                new ObjectParameter("Estimator", estimator) :
                new ObjectParameter("Estimator", typeof(string));
    
            var sRNumberParameter = sRNumber.HasValue ?
                new ObjectParameter("SRNumber", sRNumber) :
                new ObjectParameter("SRNumber", typeof(int));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var engineersEstimateParameter = engineersEstimate != null ?
                new ObjectParameter("EngineersEstimate", engineersEstimate) :
                new ObjectParameter("EngineersEstimate", typeof(string));
    
            var divisionParameter = division != null ?
                new ObjectParameter("Division", division) :
                new ObjectParameter("Division", typeof(string));
    
            var mandetoryJobWalkParameter = mandetoryJobWalk.HasValue ?
                new ObjectParameter("MandetoryJobWalk", mandetoryJobWalk) :
                new ObjectParameter("MandetoryJobWalk", typeof(bool));
    
            var jobWalkDateParameter = jobWalkDate.HasValue ?
                new ObjectParameter("JobWalkDate", jobWalkDate) :
                new ObjectParameter("JobWalkDate", typeof(System.DateTime));
    
            var qADeadLineDateTimeParameter = qADeadLineDateTime.HasValue ?
                new ObjectParameter("QADeadLineDateTime", qADeadLineDateTime) :
                new ObjectParameter("QADeadLineDateTime", typeof(System.DateTime));
    
            var quoteStatusParameter = quoteStatus != null ?
                new ObjectParameter("QuoteStatus", quoteStatus) :
                new ObjectParameter("QuoteStatus", typeof(string));
    
            var dtpLastDateFollowupParameter = dtpLastDateFollowup.HasValue ?
                new ObjectParameter("dtpLastDateFollowup", dtpLastDateFollowup) :
                new ObjectParameter("dtpLastDateFollowup", typeof(System.DateTime));
    
            var lastFollowupByParameter = lastFollowupBy != null ?
                new ObjectParameter("LastFollowupBy", lastFollowupBy) :
                new ObjectParameter("LastFollowupBy", typeof(string));
    
            var followupNoteParameter = followupNote != null ?
                new ObjectParameter("FollowupNote", followupNote) :
                new ObjectParameter("FollowupNote", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var flgAddEditParameter = flgAddEdit != null ?
                new ObjectParameter("FlgAddEdit", flgAddEdit) :
                new ObjectParameter("FlgAddEdit", typeof(string));
    
            var flgFollowUpParameter = flgFollowUp != null ?
                new ObjectParameter("FlgFollowUp", flgFollowUp) :
                new ObjectParameter("FlgFollowUp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_TT_InsertUpdateQuote", bidDateParameter, biddingAsParameter, bidToParameter, projectNameParameter, lastAddendumRecvdParameter, estimatorParameter, sRNumberParameter, uIDParameter, notesParameter, engineersEstimateParameter, divisionParameter, mandetoryJobWalkParameter, jobWalkDateParameter, qADeadLineDateTimeParameter, quoteStatusParameter, dtpLastDateFollowupParameter, lastFollowupByParameter, followupNoteParameter, emailAddressParameter, flgAddEditParameter, flgFollowUpParameter, result);
        }
    
        public virtual ObjectResult<string> USP_TT_InsertUpdateSRLog(string jobOrQuote, Nullable<bool> prevailingWageTBD, Nullable<bool> pW, string projectType, Nullable<bool> newCustomer, Nullable<bool> billing, string jobsiteAddress, Nullable<bool> quoteTypeIC, Nullable<bool> quoteTypeElectrical, Nullable<bool> quoteTypeNoBid, Nullable<System.DateTime> quoteDate, Nullable<System.DateTime> quoteTime, Nullable<decimal> sRNumber, string customer, string projectDescription, string customerContact, string contactPhone, string contactEmail, string estimator, string division, Nullable<System.DateTime> creationDate, Nullable<System.DateTime> quoteDue, Nullable<System.DateTime> jobWalkDate, Nullable<bool> mandatoryJobWalk, string bonding, string projectManager, string notes, string createdBy, Nullable<bool> followUp, Nullable<bool> active, string bidType, string owner, Nullable<System.DateTime> advertiseDate, Nullable<bool> notifyPM, string serverJobFolder, string siteForeman, string flgAddEdit, ObjectParameter result)
        {
            var jobOrQuoteParameter = jobOrQuote != null ?
                new ObjectParameter("JobOrQuote", jobOrQuote) :
                new ObjectParameter("JobOrQuote", typeof(string));
    
            var prevailingWageTBDParameter = prevailingWageTBD.HasValue ?
                new ObjectParameter("PrevailingWageTBD", prevailingWageTBD) :
                new ObjectParameter("PrevailingWageTBD", typeof(bool));
    
            var pWParameter = pW.HasValue ?
                new ObjectParameter("PW", pW) :
                new ObjectParameter("PW", typeof(bool));
    
            var projectTypeParameter = projectType != null ?
                new ObjectParameter("ProjectType", projectType) :
                new ObjectParameter("ProjectType", typeof(string));
    
            var newCustomerParameter = newCustomer.HasValue ?
                new ObjectParameter("NewCustomer", newCustomer) :
                new ObjectParameter("NewCustomer", typeof(bool));
    
            var billingParameter = billing.HasValue ?
                new ObjectParameter("Billing", billing) :
                new ObjectParameter("Billing", typeof(bool));
    
            var jobsiteAddressParameter = jobsiteAddress != null ?
                new ObjectParameter("JobsiteAddress", jobsiteAddress) :
                new ObjectParameter("JobsiteAddress", typeof(string));
    
            var quoteTypeICParameter = quoteTypeIC.HasValue ?
                new ObjectParameter("QuoteTypeIC", quoteTypeIC) :
                new ObjectParameter("QuoteTypeIC", typeof(bool));
    
            var quoteTypeElectricalParameter = quoteTypeElectrical.HasValue ?
                new ObjectParameter("QuoteTypeElectrical", quoteTypeElectrical) :
                new ObjectParameter("QuoteTypeElectrical", typeof(bool));
    
            var quoteTypeNoBidParameter = quoteTypeNoBid.HasValue ?
                new ObjectParameter("QuoteTypeNoBid", quoteTypeNoBid) :
                new ObjectParameter("QuoteTypeNoBid", typeof(bool));
    
            var quoteDateParameter = quoteDate.HasValue ?
                new ObjectParameter("QuoteDate", quoteDate) :
                new ObjectParameter("QuoteDate", typeof(System.DateTime));
    
            var quoteTimeParameter = quoteTime.HasValue ?
                new ObjectParameter("QuoteTime", quoteTime) :
                new ObjectParameter("QuoteTime", typeof(System.DateTime));
    
            var sRNumberParameter = sRNumber.HasValue ?
                new ObjectParameter("SRNumber", sRNumber) :
                new ObjectParameter("SRNumber", typeof(decimal));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("ProjectDescription", projectDescription) :
                new ObjectParameter("ProjectDescription", typeof(string));
    
            var customerContactParameter = customerContact != null ?
                new ObjectParameter("CustomerContact", customerContact) :
                new ObjectParameter("CustomerContact", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var estimatorParameter = estimator != null ?
                new ObjectParameter("Estimator", estimator) :
                new ObjectParameter("Estimator", typeof(string));
    
            var divisionParameter = division != null ?
                new ObjectParameter("Division", division) :
                new ObjectParameter("Division", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var quoteDueParameter = quoteDue.HasValue ?
                new ObjectParameter("QuoteDue", quoteDue) :
                new ObjectParameter("QuoteDue", typeof(System.DateTime));
    
            var jobWalkDateParameter = jobWalkDate.HasValue ?
                new ObjectParameter("JobWalkDate", jobWalkDate) :
                new ObjectParameter("JobWalkDate", typeof(System.DateTime));
    
            var mandatoryJobWalkParameter = mandatoryJobWalk.HasValue ?
                new ObjectParameter("MandatoryJobWalk", mandatoryJobWalk) :
                new ObjectParameter("MandatoryJobWalk", typeof(bool));
    
            var bondingParameter = bonding != null ?
                new ObjectParameter("Bonding", bonding) :
                new ObjectParameter("Bonding", typeof(string));
    
            var projectManagerParameter = projectManager != null ?
                new ObjectParameter("ProjectManager", projectManager) :
                new ObjectParameter("ProjectManager", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var followUpParameter = followUp.HasValue ?
                new ObjectParameter("FollowUp", followUp) :
                new ObjectParameter("FollowUp", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var bidTypeParameter = bidType != null ?
                new ObjectParameter("BidType", bidType) :
                new ObjectParameter("BidType", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var advertiseDateParameter = advertiseDate.HasValue ?
                new ObjectParameter("AdvertiseDate", advertiseDate) :
                new ObjectParameter("AdvertiseDate", typeof(System.DateTime));
    
            var notifyPMParameter = notifyPM.HasValue ?
                new ObjectParameter("NotifyPM", notifyPM) :
                new ObjectParameter("NotifyPM", typeof(bool));
    
            var serverJobFolderParameter = serverJobFolder != null ?
                new ObjectParameter("ServerJobFolder", serverJobFolder) :
                new ObjectParameter("ServerJobFolder", typeof(string));
    
            var siteForemanParameter = siteForeman != null ?
                new ObjectParameter("SiteForeman", siteForeman) :
                new ObjectParameter("SiteForeman", typeof(string));
    
            var flgAddEditParameter = flgAddEdit != null ?
                new ObjectParameter("FlgAddEdit", flgAddEdit) :
                new ObjectParameter("FlgAddEdit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_TT_InsertUpdateSRLog", jobOrQuoteParameter, prevailingWageTBDParameter, pWParameter, projectTypeParameter, newCustomerParameter, billingParameter, jobsiteAddressParameter, quoteTypeICParameter, quoteTypeElectricalParameter, quoteTypeNoBidParameter, quoteDateParameter, quoteTimeParameter, sRNumberParameter, customerParameter, projectDescriptionParameter, customerContactParameter, contactPhoneParameter, contactEmailParameter, estimatorParameter, divisionParameter, creationDateParameter, quoteDueParameter, jobWalkDateParameter, mandatoryJobWalkParameter, bondingParameter, projectManagerParameter, notesParameter, createdByParameter, followUpParameter, activeParameter, bidTypeParameter, ownerParameter, advertiseDateParameter, notifyPMParameter, serverJobFolderParameter, siteForemanParameter, flgAddEditParameter, result);
        }
    
        public virtual int USP_TT_SetReportUtilityPreference(string sMTPHost, Nullable<int> sMTPPort, string fromAddress, Nullable<bool> bidLogResultsFlag, Nullable<bool> bidLogNotesFlag)
        {
            var sMTPHostParameter = sMTPHost != null ?
                new ObjectParameter("SMTPHost", sMTPHost) :
                new ObjectParameter("SMTPHost", typeof(string));
    
            var sMTPPortParameter = sMTPPort.HasValue ?
                new ObjectParameter("SMTPPort", sMTPPort) :
                new ObjectParameter("SMTPPort", typeof(int));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var bidLogResultsFlagParameter = bidLogResultsFlag.HasValue ?
                new ObjectParameter("BidLogResultsFlag", bidLogResultsFlag) :
                new ObjectParameter("BidLogResultsFlag", typeof(bool));
    
            var bidLogNotesFlagParameter = bidLogNotesFlag.HasValue ?
                new ObjectParameter("BidLogNotesFlag", bidLogNotesFlag) :
                new ObjectParameter("BidLogNotesFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_TT_SetReportUtilityPreference", sMTPHostParameter, sMTPPortParameter, fromAddressParameter, bidLogResultsFlagParameter, bidLogNotesFlagParameter);
        }
    }
}
